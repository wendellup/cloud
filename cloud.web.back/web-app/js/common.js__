function closeDialog(dialogId) {
    $(dialogId).dialog('close');
}
function showDialog(config) {
    var f='#'+config.id;
    var default_left;  
    var default_top;  
    $(f).dialog({
        width: config.width ? config.width : 'auto',
        height: config.height ? config.height : 'auto',
        closed: config.closed ? config.closed : false,
        cache: config.cache ? config.cache : false,
        href: config.url ? config.url : config,
        modal: config.modal ? config.modal : true,
        title: config.title ? config.title : ""
    });
}

document.onkeydown = function(e){
    if(!e) {
        e = window.event;
    }
    if((e.keyCode || e.which) == 13){
    	if (document.getElementById("searchBtn")){
    		var window_mask = document.getElementsByClassName("window-mask");
    		if((window_mask.length>0 && window_mask[0].style.display=='none') || (window_mask.length==0)){
    			document.getElementById("searchBtn").click();
    			if (window.event){
    	            e.returnValue = false;// IE浏览器 特定处理
    	            return false;
    	        } else {
    	            e.preventDefault(); // 标准关闭默认事件方式
    	        }
    		}
    	}
   	}
}

var ie = (function() {   
    var undef, v = 3, div = document.createElement('div'), all = div.getElementsByTagName('i');   
    while (div.innerHTML = '<!--[if gt IE ' + (++v) + ']><i></i><![endif]-->', all[0]);   
    return v > 4 ? v : undef;   
}());   
  
var easyuiPanelOnResize = function(width, height) {
    if (!$.data(this, 'window') && !$.data(this, 'dialog'))
        return;
    if (ie === 8) {   
        var data = $.data(this, "window") || $.data(this, "dialog");   
        if (data.pmask) {   
            var masks = data.window.nextAll('.window-proxy-mask');   
            if (masks.length > 1) {   
                $(masks[1]).remove();   
                masks[1] = null;   
            }   
        }   
    }   
    if ($(this).panel('options').maximized == true) {   
        $(this).panel('options').fit = false;   
    }   
    $(this).panel('options').reSizing = true;   
    if (!$(this).panel('options').reSizeNum) {   
        $(this).panel('options').reSizeNum = 1;   
    } else {   
        $(this).panel('options').reSizeNum++;   
    }   
    var parentObj = $(this).panel('panel').parent();   
    var left = $(this).panel('panel').position().left;   
    var top = $(this).panel('panel').position().top;   
  
    if ($(this).panel('panel').offset().left < 0) {   
        $(this).panel('move', {   
                    left : 0   
                });   
    }   
    if ($(this).panel('panel').offset().top < 0) {   
        $(this).panel('move', {   
                    top : 0   
                });   
    }   
  
    if (left < 0) {   
        $(this).panel('move', {   
                    left : 0   
                }).panel('resize', {   
                    width : width + left   
                });   
    }   
    if (top < 0) {   
        $(this).panel('move', {   
                    top : 0   
                }).panel('resize', {   
                    height : height + top   
                });   
    }   
    if (parentObj.css("overflow") == "hidden") {
        var inline = $.data(this, "window").options.inline;   
        if (inline == false) {   
            parentObj = $(window);   
        }   
  
        if ((width + left > parentObj.width())   
                && $(this).panel('options').reSizeNum > 1) {   
            $(this).panel('resize', {   
                        width : parentObj.width() - left   
                    });   
        }   
  
        if ((height + top > parentObj.height())   
                && $(this).panel('options').reSizeNum > 1) {   
            $(this).panel('resize', {   
                        height : parentObj.height() - top   
                    });   
        }   
    }   
    $(this).panel('options').reSizing = false;   
};   
 
var easyuiPanelOnMove = function(left, top) {   
    if ($(this).panel('options').reSizing)   
        return;   
    var parentObj = $(this).panel('panel').parent();   
    var width = $(this).panel('options').width;   
    var height = $(this).panel('options').height;   
    var right = left + width;   
    var buttom = top + height;   
    var parentWidth = parentObj.width();   
    var parentHeight = parentObj.height();   
  
    if (left < 0) {   
        $(this).panel('move', {   
                    left : 0   
                });   
    }   
    if (top < 0) {   
        $(this).panel('move', {   
                    top : 0   
                });   
    }   
  
    if (parentObj.css("overflow") == "hidden") {   
        var inline = $.data(this, "window").options.inline;   
        if (inline == false) {   
            parentObj = $(window);   
        }   
        if (left > parentObj.width() - width) {   
            $(this).panel('move', {   
                        "left" : parentObj.width() - width   
                    });   
        }   
        if (top > parentObj.height() - height) {   
            $(this).panel('move', {   
                        "top" : parentObj.height() - height   
                    });   
        }   
    }   
};   
  
//$.fn.window.defaults.onResize = easyuiPanelOnResize;
//$.fn.dialog.defaults.onResize = easyuiPanelOnResize;
//$.fn.window.defaults.onMove = easyuiPanelOnMove;
if ($.fn.dialog){
	$.fn.dialog.defaults.onMove = easyuiPanelOnMove;
}

/**
 * 
 * @param divId
 * @param data
 * @param url
 * @param completeCallback
 * @param type  1--图片(jpg格式); 2--视频; 3--excel(xsl格式); 4--txt文件; 5--apk文件; 200-应用/游戏icon
 */
function createUpload(divId, data, url, completeCallback, type) {
	new AjaxUpload(divId,
    {
		action: url,
       	data:data ,
       	name:'ajaxupload',
       	onSubmit: function(file, extension) {
		   var fileType = file.substring(file.lastIndexOf(".")+1,file.length);
		   if (type == 1){
			   if(!/(\JPG|\jpg)/g.test(fileType)) {
				   $.messager.alert('提示',"请上传jpg格式的图片文件!",'info');
				   return false;
			   }
		   }
		   else if (type == 2){
			   //暂时不做文件格式校验
			   
		   }
		   else if (type==3){
			   if(!/(\XLS|\xls)/g.test(fileType)) {
                   $.messager.alert('提示',"请上传xls格式的文件!",'info');
                   return false;
               }

		   }
		   else if (type==4){
			   if(!/(TXT|txt)/g.test(fileType)) {
				   $.messager.alert('提示',"请上传txt格式的文件!",'info');
				   return false;
			   }
		   }
		   else if (type==5){
			   if(!/(\APK|\apk)/g.test(fileType)) {
				   $.messager.alert('提示',"请上传apk格式的文件!",'info');
				   return false;
			   }
		   }
		   else if (type==200){
			   if((!/(\JPG|\jpg)/g.test(fileType)) && (!/(\PNG|\png)/g.test(fileType))) {
				   $.messager.alert('提示',"请上传jpg/png格式的文件!",'info');
				   return false;
			   }
		   }
		   else if (type==201){
			   if((!/(\JPG|\jpg)/g.test(fileType)) && (!/(\PNG|\png)/g.test(fileType)) && (!/(\GIF|\gif)/g.test(fileType))) {
				   $.messager.alert('提示',"请上传jpg/png/gif格式的文件!",'info');
				   return false;
			   }
		   } 
		   else if (type==250){
               if((!/(\JPG|\jpg)/g.test(fileType)) && (!/(\PNG|\png)/g.test(fileType)) && (!/(\GIF|\gif)/g.test(fileType))&& (!/(\JPEG|\jpeg)/g.test(fileType))) {
                   $.messager.alert('提示',"请上传jpg/png/jpeg/gif格式的文件!",'info');
                   return false;
               }
           }
		   else {
			   if(!/(\JPG|\jpg)/g.test(fileType)) {
				   $.messager.alert('提示',"请上传jpg格式的图片文件!",'info');
				   return false;
			   }
		   }
		   //var confirmResult = confirm("确定上传文件：" + file + "?", "确定");
           //if (confirmResult){
           	//遮罩层，防止用户重复提交
	            $('<div id="mask"></div>').appendTo('body').height($("body").height());
           //}
           return true;
	    },
	    responseType:"json",
	    onComplete: function(file, response) {
	    	$("#mask").remove();
	    	if(!response.result){
	    		$.messager.alert('提示',response.msg,'error');
               	return;
           	}
           completeCallback(file, response);
       }
   });
}

function getWidth(percent){
    return document.body.clientWidth*percent;
} 

// ------------------------------------首页左边菜单点击相关JS方法-------------------------------------//
function cancelBubble(e)
{
	if (e.stopPropagation) e.stopPropagation();
	else e.cancelBubble = true;
}
function tabChangeIframe (src) {
	var jparentDoc = $(window.parent ? window.parent.document : window.document);
    var jiframe = jparentDoc.find("#iframe");
    var randomnumber=Math.floor(Math.random()*100000);
    var search = (src.indexOf("?") != -1) ? '&random='+randomnumber : '?random='+randomnumber;
    jiframe.attr("src",src+search).show();
	showTipLoad(jparentDoc);
}
// iframe高度自适应
function iframeHeightAuto(){
	var doc = window.parent ? window.parent.document : window.document,iframe = doc.getElementById("iframe");	
	var bHeight = iframe.contentWindow.document.body.scrollHeight;
	var dHeight = iframe.contentWindow.document.documentElement.scrollHeight;
    var cHeight = doc.documentElement.clientHeight;
    iframe.style.height = Math.max(Math.max(bHeight,dHeight),cHeight)+"px";
	// alert($(doc.getElementById("menu")).height())
	if($(doc.getElementById("menu")).height()<Math.max(bHeight,dHeight)){
		doc.getElementById("menu").style.height = Math.max(bHeight,dHeight)+"px";
	}
}
function showTipLoad(obj){
	setTip("页面正在加载中",true);
}
function hideTipLoad(){
	var jparentDoc = $(window.parent ? window.parent.document : window.document);
	jparentDoc.find("#tip").fadeOut().removeClass("load");
}
// 显示提示
function setTip(tiptext,notime){
	var doc = window.parent ? window.parent.document : window.document;
	var tip;
	if($(doc).find("#tip")[0]){
		tip = $(doc).find("#tip");
		tip.show().find("em").html(tiptext);
		if(notime){
			tip.removeClass("load");	
		}
	}
	boxCenter(tip);
	if(notime){
		$(tip).addClass("load");
	}else{
		setTimeout(function(){$(doc).find("#tip").fadeOut()},1500);	
	}
}
// 整体居中
function boxCenter(obj){
	var doc = window.parent,content = $(obj),dom = doc.document.documentElement;
	var left = (parseInt(dom.offsetWidth)-content.width())/2;
	var top = (parseInt( doc.screen.height)-content.height())/2 + dom.scrollTop;
	// alert( window.parent.document.documentElement.scrollTop);
	content.css({"top":(top <0 ? 0 : top)+"px","left":(left < 0 ? 0 : left)+"px"});
	
}
// 正则表达式, 获取 URL 中的参数
function     GetQueryString(name)   
{   
     var     reg     =   new   RegExp("(^|&)"+     name     +"=([^&]*)(&|$)");   
     var     r     =     window.location.search.substr(1).match(reg);   
     if     (r!=null)   return     unescape(r[2]);   return   null;   
} 


//判断字符串所占的字节数
function getCharLength(str)
{
    var iLength = 0; 
    for(var i = 0; i < str.length; i ++)
    {
        if(str.charCodeAt(i) > 255)   //如果当前字符的编码大于255
        {
            iLength += 2;    //所占字节数加2
        }
        else
        {
            iLength += 1;   //否则所占字节数加1
        }
    }
    return iLength;   //返回字符所占字节数
}
//若字符串长度超过要求，截掉多余部分
function checkLength(obj,len)
{
    var str = obj.value;  //获取要处理的字符串
    var curStr = "";  //用于实时存储字符串
    for(var i = 0; i < str.length; i ++)
    {
        curStr += str.charAt(i);  //记录当前遍历过的所有字符
        if(getCharLength(curStr) > len)  
        {
        	obj.value = str.substring(0,i);  
            return; 
        }
    }
}

//若字符串长度超过要求，截掉多余部分
function checkLengthMulti(obj,len)
{
    var str = obj.value;  //获取要处理的字符串
    var strArray = str.split(",");
    for (var i = 0; i < strArray.length; i ++){
        var curStr = "";//用于实时存储字符串
        for(var j = 0; j < strArray[i].length; j ++)
        {

            curStr += strArray[i].charAt(j);  //记录当前遍历过的所有字符
            if(getCharLength(curStr) > len)
            {
                alert("单个推荐语请不要超过10个汉字");
                obj.value = "";
                return;
            }
        }
    }
}

//判断下拉框选项是否选中
function checkOptionSelected(e) {
    var flag = true;
    for (var i = 0; i < e.options.length; i++) {
        if (e.options[i].selected) {
            flag = false;
            break;
        }
    }
    if (flag) {
    	$.messager.alert('提示', '请至少选择一条记录进行操作！', 'info');
        return false;
    }
    else if (e.options[0].value == "-1" || e.options[0].value == "") {
        $.messager.alert('提示', '请至少选择一条记录进行操作！', 'info');
        return false;
    }
    return true;
}

//删除下拉框选中的选项
function removeOption(e) {
    for (var i = 0; i < e.options.length; i++) {
        if (e.options[i].selected) {
        	e.options[i].remove(i);
        	i--;
        }
    }
}

//将左边下拉框的选项选择到右边下拉框中
function moveLeftOptionToRight(leftSelect, rightSelect) {
	var optionsArray = [];
	for (var i = 0; i < leftSelect.options.length; i++) {
        if (leftSelect.options[i].selected) {
        	optionsArray.push({"id": leftSelect.options[i].value, "text": leftSelect.options[i].text});
        }
    }
	for (var i = 0; i < rightSelect.options.length; i++) {
    	var value = rightSelect.options[i].value;
    	for (var j = 0; j < optionsArray.length; j++){
    		if (value == optionsArray[j].id){
                optionsArray.splice(j, 1);
            }
    	}
	}
    if (optionsArray.length == 0) {
        $.messager.alert('提示', '所选记录已存在', 'info');
    }
    else {
        for (var i = 0; i < optionsArray.length; i++) {
        	var oOption = document.createElement("OPTION");
            oOption.text = optionsArray[i].text; 
           	oOption.value = optionsArray[i].id;
            rightSelect.options.add(oOption);
        }
    }
}

function stringToDate(dateStr) {
    var date = new Date();
	date.setFullYear(dateStr.substring(0,4), dateStr.substring(5,7) - 1, dateStr.substring(8,10));
	date.setHours(dateStr.substring(11,13));
	date.setMinutes(dateStr.substring(14,16));
	date.setSeconds(dateStr.substring(17,19));
	return date;
}
  
$.fn.setSelection = function(selectionStart, selectionEnd) {  
    if(this.lengh == 0) return this;  
    input = this[0];  
  
    if (input.createTextRange) {  
        var range = input.createTextRange();  
        range.collapse(true);  
        range.moveEnd('character', selectionEnd);  
        range.moveStart('character', selectionStart);  
        range.select();  
    } else if (input.setSelectionRange) {  
        input.focus();  
        input.setSelectionRange(selectionStart, selectionEnd);  
    }  
  
    return this;  
}

$.fn.setCursorPosition = function(position){  
    if(this.lengh == 0) return this;  
    return $(this).setSelection(position, position);  
}  
  
$.fn.focusEnd = function(){
    this.setCursorPosition(this.val().length);  
}